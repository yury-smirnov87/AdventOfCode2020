/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.github.yury.smirnov.aoc2020;

import java.util.HashSet;

public class Day1ReportRepair {

    public static final int SUM_2020 = 2020;

    public long findProductOfTwoForSum(int sum, int[] input) {
        int[] pair = findTwoForSum(sum, input, 0);
        System.out.println("first=" + pair[0] + "; second=" + pair[1]);
        return pair[0] * pair[1];
    }

    public long findProductOfThreeForSum(int sum, int[] input) {
        int[] three = findThreeForSum(sum, input);
        System.out.println("first=" + three[0] + "; second=" + three[1] + "; third=" + three[2]);
        return three[0] * three[1] * three[2];
    }

    public int[] findTwoForSum(int sum, int[] input, int startIndex) {
        HashSet<Integer> seenComplements = new HashSet<>();
        for (int i = startIndex; i < input.length; i++) {
            int current = input[i];
            if (seenComplements.contains(current)) {
                return new int[]{sum - current, current};
            }
            seenComplements.add(sum - current);
        }
        throw new NotFoundException();
    }

    public int[] findThreeForSum(int sum, int[] input) {
        for (int i = 0; i < input.length - 2; i++) {
            int subSum = sum - input[i];
            try {
                int[] pair = findTwoForSum(subSum, input, i + 1);
                return new int[]{input[i], pair[0], pair[1]};
            } catch (NotFoundException ex) {
                //continue
            }
        }
        throw new NotFoundException();
    }

    private static final class NotFoundException extends RuntimeException {

        private NotFoundException() {
            super("Not found");
        }
    }
}
